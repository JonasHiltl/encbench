package encbench

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Complex) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "integer":
			z.Integer, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Integer")
				return
			}
		case "float":
			z.Float, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Float")
				return
			}
		case "boolean":
			z.Boolean, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Boolean")
				return
			}
		case "string":
			z.String, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "String")
				return
			}
		case "slice":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Slice")
				return
			}
			if cap(z.Slice) >= int(zb0002) {
				z.Slice = (z.Slice)[:zb0002]
			} else {
				z.Slice = make([]int, zb0002)
			}
			for za0001 := range z.Slice {
				z.Slice[za0001], err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Slice", za0001)
					return
				}
			}
		case "map":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Map")
				return
			}
			if z.Map == nil {
				z.Map = make(map[string]int, zb0003)
			} else if len(z.Map) > 0 {
				for key := range z.Map {
					delete(z.Map, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0002 string
				var za0003 int
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Map")
					return
				}
				za0003, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Map", za0002)
					return
				}
				z.Map[za0002] = za0003
			}
		case "struct":
			var zb0004 uint32
			zb0004, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "StructField")
				return
			}
			for zb0004 > 0 {
				zb0004--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "StructField")
					return
				}
				switch msgp.UnsafeString(field) {
				case "field1":
					z.StructField.Field1, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "StructField", "Field1")
						return
					}
				case "field2":
					z.StructField.Field2, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "StructField", "Field2")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "StructField")
						return
					}
				}
			}
		case "time":
			z.Time, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "Time")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Complex) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "integer"
	err = en.Append(0x88, 0xa7, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Integer)
	if err != nil {
		err = msgp.WrapError(err, "Integer")
		return
	}
	// write "float"
	err = en.Append(0xa5, 0x66, 0x6c, 0x6f, 0x61, 0x74)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Float)
	if err != nil {
		err = msgp.WrapError(err, "Float")
		return
	}
	// write "boolean"
	err = en.Append(0xa7, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Boolean)
	if err != nil {
		err = msgp.WrapError(err, "Boolean")
		return
	}
	// write "string"
	err = en.Append(0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.String)
	if err != nil {
		err = msgp.WrapError(err, "String")
		return
	}
	// write "slice"
	err = en.Append(0xa5, 0x73, 0x6c, 0x69, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Slice)))
	if err != nil {
		err = msgp.WrapError(err, "Slice")
		return
	}
	for za0001 := range z.Slice {
		err = en.WriteInt(z.Slice[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Slice", za0001)
			return
		}
	}
	// write "map"
	err = en.Append(0xa3, 0x6d, 0x61, 0x70)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Map)))
	if err != nil {
		err = msgp.WrapError(err, "Map")
		return
	}
	for za0002, za0003 := range z.Map {
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Map")
			return
		}
		err = en.WriteInt(za0003)
		if err != nil {
			err = msgp.WrapError(err, "Map", za0002)
			return
		}
	}
	// write "struct"
	err = en.Append(0xa6, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74)
	if err != nil {
		return
	}
	// map header, size 2
	// write "field1"
	err = en.Append(0x82, 0xa6, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31)
	if err != nil {
		return
	}
	err = en.WriteString(z.StructField.Field1)
	if err != nil {
		err = msgp.WrapError(err, "StructField", "Field1")
		return
	}
	// write "field2"
	err = en.Append(0xa6, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32)
	if err != nil {
		return
	}
	err = en.WriteInt(z.StructField.Field2)
	if err != nil {
		err = msgp.WrapError(err, "StructField", "Field2")
		return
	}
	// write "time"
	err = en.Append(0xa4, 0x74, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteTime(z.Time)
	if err != nil {
		err = msgp.WrapError(err, "Time")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Complex) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "integer"
	o = append(o, 0x88, 0xa7, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72)
	o = msgp.AppendInt(o, z.Integer)
	// string "float"
	o = append(o, 0xa5, 0x66, 0x6c, 0x6f, 0x61, 0x74)
	o = msgp.AppendFloat64(o, z.Float)
	// string "boolean"
	o = append(o, 0xa7, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e)
	o = msgp.AppendBool(o, z.Boolean)
	// string "string"
	o = append(o, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67)
	o = msgp.AppendString(o, z.String)
	// string "slice"
	o = append(o, 0xa5, 0x73, 0x6c, 0x69, 0x63, 0x65)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Slice)))
	for za0001 := range z.Slice {
		o = msgp.AppendInt(o, z.Slice[za0001])
	}
	// string "map"
	o = append(o, 0xa3, 0x6d, 0x61, 0x70)
	o = msgp.AppendMapHeader(o, uint32(len(z.Map)))
	for za0002, za0003 := range z.Map {
		o = msgp.AppendString(o, za0002)
		o = msgp.AppendInt(o, za0003)
	}
	// string "struct"
	o = append(o, 0xa6, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74)
	// map header, size 2
	// string "field1"
	o = append(o, 0x82, 0xa6, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31)
	o = msgp.AppendString(o, z.StructField.Field1)
	// string "field2"
	o = append(o, 0xa6, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32)
	o = msgp.AppendInt(o, z.StructField.Field2)
	// string "time"
	o = append(o, 0xa4, 0x74, 0x69, 0x6d, 0x65)
	o = msgp.AppendTime(o, z.Time)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Complex) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "integer":
			z.Integer, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Integer")
				return
			}
		case "float":
			z.Float, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Float")
				return
			}
		case "boolean":
			z.Boolean, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Boolean")
				return
			}
		case "string":
			z.String, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "String")
				return
			}
		case "slice":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Slice")
				return
			}
			if cap(z.Slice) >= int(zb0002) {
				z.Slice = (z.Slice)[:zb0002]
			} else {
				z.Slice = make([]int, zb0002)
			}
			for za0001 := range z.Slice {
				z.Slice[za0001], bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Slice", za0001)
					return
				}
			}
		case "map":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Map")
				return
			}
			if z.Map == nil {
				z.Map = make(map[string]int, zb0003)
			} else if len(z.Map) > 0 {
				for key := range z.Map {
					delete(z.Map, key)
				}
			}
			for zb0003 > 0 {
				var za0002 string
				var za0003 int
				zb0003--
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Map")
					return
				}
				za0003, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Map", za0002)
					return
				}
				z.Map[za0002] = za0003
			}
		case "struct":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StructField")
				return
			}
			for zb0004 > 0 {
				zb0004--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "StructField")
					return
				}
				switch msgp.UnsafeString(field) {
				case "field1":
					z.StructField.Field1, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "StructField", "Field1")
						return
					}
				case "field2":
					z.StructField.Field2, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "StructField", "Field2")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "StructField")
						return
					}
				}
			}
		case "time":
			z.Time, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Time")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Complex) Msgsize() (s int) {
	s = 1 + 8 + msgp.IntSize + 6 + msgp.Float64Size + 8 + msgp.BoolSize + 7 + msgp.StringPrefixSize + len(z.String) + 6 + msgp.ArrayHeaderSize + (len(z.Slice) * (msgp.IntSize)) + 4 + msgp.MapHeaderSize
	if z.Map != nil {
		for za0002, za0003 := range z.Map {
			_ = za0003
			s += msgp.StringPrefixSize + len(za0002) + msgp.IntSize
		}
	}
	s += 7 + 1 + 7 + msgp.StringPrefixSize + len(z.StructField.Field1) + 7 + msgp.IntSize + 5 + msgp.TimeSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Foo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "foo":
			z.Foo, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Foo")
				return
			}
		case "bar":
			z.Bar, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Bar")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Foo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "foo"
	err = en.Append(0x82, 0xa3, 0x66, 0x6f, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteString(z.Foo)
	if err != nil {
		err = msgp.WrapError(err, "Foo")
		return
	}
	// write "bar"
	err = en.Append(0xa3, 0x62, 0x61, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Bar)
	if err != nil {
		err = msgp.WrapError(err, "Bar")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Foo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "foo"
	o = append(o, 0x82, 0xa3, 0x66, 0x6f, 0x6f)
	o = msgp.AppendString(o, z.Foo)
	// string "bar"
	o = append(o, 0xa3, 0x62, 0x61, 0x72)
	o = msgp.AppendString(o, z.Bar)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Foo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "foo":
			z.Foo, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Foo")
				return
			}
		case "bar":
			z.Bar, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bar")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Foo) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.Foo) + 4 + msgp.StringPrefixSize + len(z.Bar)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SomeOtherStruct) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "field1":
			z.Field1, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Field1")
				return
			}
		case "field2":
			z.Field2, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Field2")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z SomeOtherStruct) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "field1"
	err = en.Append(0x82, 0xa6, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31)
	if err != nil {
		return
	}
	err = en.WriteString(z.Field1)
	if err != nil {
		err = msgp.WrapError(err, "Field1")
		return
	}
	// write "field2"
	err = en.Append(0xa6, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Field2)
	if err != nil {
		err = msgp.WrapError(err, "Field2")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SomeOtherStruct) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "field1"
	o = append(o, 0x82, 0xa6, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31)
	o = msgp.AppendString(o, z.Field1)
	// string "field2"
	o = append(o, 0xa6, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32)
	o = msgp.AppendInt(o, z.Field2)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SomeOtherStruct) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "field1":
			z.Field1, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Field1")
				return
			}
		case "field2":
			z.Field2, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Field2")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SomeOtherStruct) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.Field1) + 7 + msgp.IntSize
	return
}
